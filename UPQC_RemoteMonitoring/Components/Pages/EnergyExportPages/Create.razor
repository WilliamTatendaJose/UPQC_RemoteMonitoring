@page "/energyexports/create"
@inject UPQC_RemoteMonitoring.Data.ApplicationDbContext DB
@using UPQC_RemoteMonitoring.Models
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>EnergyExport</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="EnergyExport" OnValidSubmit="AddEnergyExport" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="energyexported" class="form-label">EnergyExported:</label> 
                <InputNumber id="energyexported" @bind-Value="EnergyExport.EnergyExported" class="form-control" /> 
                <ValidationMessage For="() => EnergyExport.EnergyExported" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label> 
                <InputDate id="date" @bind-Value="EnergyExport.Date" class="form-control" /> 
                <ValidationMessage For="() => EnergyExport.Date" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/energyexports">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public EnergyExport EnergyExport { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddEnergyExport()
    {
        DB.EnergyExport.Add(EnergyExport);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/energyexports");
    }
}
